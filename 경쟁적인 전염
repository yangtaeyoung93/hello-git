import java.util.*;
class Point implements Comparable<Point>{
	public int x,y,virus,s;
	Point (int x, int y,int virus,int s){
		this.x = x;
		this.y = y;
		this.virus = virus;
		this.s = s;
	}
	@Override
	public int compareTo(Point ob) {
		return this.virus - ob.virus;
	}
}
public class Main {
	static int n,k,s,x,y,answer=0;
	static int[][] arr;
	int[] dx = {-1,0,1,0};
	int[] dy = {0,1,0,-1};
	static Queue<Point> queue = new LinkedList<>();
	static ArrayList<Point> list = new ArrayList<>();
	public void BFS() {
		while(!queue.isEmpty()) {
			Point tmp = queue.poll();
			if(s == tmp.s ) break;
			for(int i=0; i<4; i++) {
				int nx = tmp.x + dx[i];
				int ny = tmp.y + dy[i];
				if(nx >= 0 && nx <n && ny >= 0 && ny < n && arr[nx][ny] == 0) {
					arr[nx][ny] = tmp.virus;
					queue.offer(new Point(nx, ny, tmp.virus,tmp.s+1));
				}
			}
		}
			answer = arr[x-1][y-1];
	}
	public static void main(String[] args) {
		Main T = new Main();
		Scanner sc = new Scanner(System.in);
		 n = sc.nextInt();
		 k = sc.nextInt();
		 arr = new int[200][200];
		 for(int i=0; i< n; i++) {
			 for(int j=0; j< n; j++) {
				 arr[i][j] = sc.nextInt();
				 if(arr[i][j] != 0) {
					 list.add(new Point(i, j,arr[i][j],0));
				 }
			 }
		 }
		 Collections.sort(list);
		 for(int i=0; i<list.size(); i++) {
			 queue.offer(list.get(i));
		 }
		  s = sc.nextInt();
		  x = sc.nextInt();
		  y = sc.nextInt();
		 T.BFS();
		 System.out.println(answer);
	}
}
