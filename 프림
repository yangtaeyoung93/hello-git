import java.util.*;
class Edge implements Comparable<Edge>{
	public int vex,cost;
	public Edge(int vex, int cost) {
		this.vex = vex;
		this.cost = cost;
	}
	@Override
	public int compareTo(Edge ob) {
		return this.cost - ob.cost;
	}
}
class Main {
	public static void main(String[] args){
		Main T = new Main();
		Scanner kb = new Scanner(System.in);
		ArrayList<ArrayList<Edge>> graph = new ArrayList<ArrayList<Edge>>();
		int n = kb.nextInt();
		int m = kb.nextInt();
		int[] ch = new int[n+1];
		for(int i=0; i<=n;i++) {
			graph.add(new ArrayList<Edge>());
		}
		for(int i=0; i<m; i++) {
			int a = kb.nextInt();
			int b = kb.nextInt();
			int c = kb.nextInt();
			graph.get(a).add(new Edge(b, c));
			graph.get(b).add(new Edge(a, c));
		}
		int answer = 0;
		PriorityQueue<Edge> pq = new PriorityQueue<>();
		pq.offer(new Edge(1, 0));
		while(!pq.isEmpty()) {
			Edge tmp = pq.poll();
			int ev = tmp.vex;
			if(ch[ev] == 0) {
				answer+=tmp.cost;
				ch[ev] = 1;
				for(Edge ob : graph.get(ev)) {//연결된 정보들
					if(ch[ob.vex] == 0) {//방문하지않은 정점 체크
						pq.offer(new Edge(ob.vex, ob.cost));
					}
				}
			}
		}
		System.out.println(answer);
	}
}
