import java.util.*;
class Edge implements Comparable<Edge>{
	public int v1,v2,cost;
	public Edge(int v1, int v2, int cost) {
		this.v1 = v1;
		this.v2 = v2;
		this.cost = cost;
	}
	@Override
	public int compareTo(Edge o) {
		return this.cost - o.cost;
	}
	
}
class Main {
	static int[] unf;
	public int Find(int v) {
		if(v == unf[v]) return v;
		else return unf[v] = Find(unf[v]);
	}
	public void Union(int a, int b) {
		int fa = Find(a);
		int fb = Find(b);
		if(fa!=fb) unf[fa] = fb;
	}
	public static void main(String[] args){
		Main T = new Main();
		Scanner kb = new Scanner(System.in);
		ArrayList<Edge> list = new ArrayList<>();
		int n = kb.nextInt();
		int m = kb.nextInt();
		unf = new int[n+1];
		for(int i=1; i<=n; i++) {
			unf[i] = i;
		}
		for(int i=1; i<=m; i++) {
			int a = kb.nextInt();
			int b = kb.nextInt();
			int c = kb.nextInt();
			list.add(new Edge(a, b, c));
		}
		int answer = 0;
		Collections.sort(list);
		
		for(Edge ob : list) {
			int fv1 = T.Find(ob.v1);
			int fv2 = T.Find(ob.v2);
			if(fv1!=fv2) {
				answer+=ob.cost;
				T.Union(fv1, fv2);
			}
		}
		System.out.println(answer);
	}
}
